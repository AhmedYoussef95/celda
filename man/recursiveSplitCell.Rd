% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recursiveSplit.R
\name{recursiveSplitCell}
\alias{recursiveSplitCell}
\title{Recursive cell splitting}
\usage{
recursiveSplitCell(counts, sample.label = NULL, initial.K = 5,
  max.K = 25, y.init = NULL, alpha = 1, beta = 1, delta = 1,
  gamma = 1, min.cell = 3, perplexity = TRUE, seed = 12345,
  logfile = NULL, verbose = TRUE)
}
\arguments{
\item{counts}{Integer matrix. Rows represent features and columns represent cells.}

\item{sample.label}{Vector or factor. Denotes the sample label for each cell (column) in the count matrix.}

\item{initial.K}{Integer. Minimum number of cell populations to try.}

\item{max.K}{Integer. Maximum number of cell populations to try.}

\item{y.init}{Integer vector. Module labels for features. Cells will be clusteredusing the `celda_CG` model based on the modules specified in `y.init` rather than the counts of individual features. While the feature module labels will be initialized to `y.init`, they will be allowed to move within each model with a new K.}

\item{alpha}{Numeric. Concentration parameter for Theta. Adds a pseudocount to each cell population in each sample. Default 1.}

\item{beta}{Numeric. Concentration parameter for Phi. Adds a pseudocount to each feature in each cell (if `y.init` is not used) or to each module in each cell population (if `y.init` is set). Default 1.}

\item{delta}{Numeric. Concentration parameter for Psi. Adds a pseudocount to each feature in each module. Only used if `y.init` is set. Default 1.}

\item{gamma}{Numeric. Concentration parameter for Eta. Adds a pseudocount to the number of features in each module. Only used if `y.init` is set. Default 1.}

\item{min.cell}{Integer. Only attempt to split cell populations with at least this many cells.}

\item{perplexity}{Logical. Whether to calculate perplexity for each model. If FALSE, then perplexity can be calculated later with `resamplePerplexity()`. Default TRUE.}

\item{seed}{Integer. Passed to `set.seed()`. Default 12345. If NULL, no calls to `set.seed()` are made.}

\item{logfile}{Character. Messages will be redirected to a file named `logfile`. If NULL, messages will be printed to stdout.  Default NULL.}

\item{verbose}{Logical. Whether to print log messages. Default TRUE.}
}
\value{
Object of class `celda_list`, which contains results for all model parameter combinations and summaries of the run parameters
}
\description{
Uses the `celda_C` model to cluster cells into population for range of possible K's. The cell population labels of the previous "K-1" model are used as the initial values in the current model with K cell populations. The best split of an existing cell population is found to create the K-th cluster. This procedure is much faster than randomly initializing each model with a different K. If module labels for each feature are given in 'y.init', the `celda_CG` model will be used to split cell populations based on those modules instead of individual features. Module labels will also be updated during sampling and thus may end up slightly different than `y.init`.
}
\examples{
## Create models that range from K=3 to K=10 by recursively splitting cell populations into two to produce `celda_C` cell clustering models
testZ = recursiveSplitCell(celda.C.sim$counts, initial.K = 3, max.K=10)

## Alternatively, first identify features modules usinge `recursiveSplitModule()`
module.split = recursiveSplitModule(celda.CG.sim$counts, initial.L = 3, max.L=20)
plotGridSearchPerplexity(module.split)
module.split.select = subsetCeldaList(module.split, list(L=10))
Then, use module labels for initialization in `recursiveSplitCell()` to produce `celda_CG` bi-clustering models
cell.split = recursiveSplitCell(celda.CG.sim$counts, initial.K = 3, max.K=20, y.init = clusters(module.split.select)$y)
plotGridSearchPerplexity(cell.split) 
celda.mod = subsetCeldaList(cell.split, list(K=5, L=10))
}
\seealso{
`recursiveSplitModule()` for recursive splitting of cell populations.
}
